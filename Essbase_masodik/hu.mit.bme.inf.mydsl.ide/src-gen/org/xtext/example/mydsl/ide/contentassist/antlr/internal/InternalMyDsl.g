/*
 * generated by Xtext 2.9.1
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitialStatement
entryRuleInitialStatement
:
{ before(grammarAccess.getInitialStatementRule()); }
	 ruleInitialStatement
{ after(grammarAccess.getInitialStatementRule()); } 
	 EOF 
;

// Rule InitialStatement
ruleInitialStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialStatementAccess().getSUPEMPTYROWSDECIMAL10TABDELIMITROWREPEATSUPBRACKETSSUPCOMMASNOINDENTGENKeyword()); }
		'{SUPEMPTYROWS}\r\n\t{DECIMAL 10}\r\n\t{TABDELIMIT}\r\n\t{ROWREPEAT}\r\n\t{SUPBRACKETS}\r\n\t{SUPCOMMAS}\r\n\t{NOINDENTGEN}'
		{ after(grammarAccess.getInitialStatementAccess().getSUPEMPTYROWSDECIMAL10TABDELIMITROWREPEATSUPBRACKETSSUPCOMMASNOINDENTGENKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescendants
entryRuleDescendants
:
{ before(grammarAccess.getDescendantsRule()); }
	 ruleDescendants
{ after(grammarAccess.getDescendantsRule()); } 
	 EOF 
;

// Rule Descendants
ruleDescendants 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescendantsAccess().getGroup()); }
		(rule__Descendants__Group__0)
		{ after(grammarAccess.getDescendantsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDimensionDeclaration
entryRuleDimensionDeclaration
:
{ before(grammarAccess.getDimensionDeclarationRule()); }
	 ruleDimensionDeclaration
{ after(grammarAccess.getDimensionDeclarationRule()); } 
	 EOF 
;

// Rule DimensionDeclaration
ruleDimensionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDimensionDeclarationAccess().getGroup()); }
		(rule__DimensionDeclaration__Group__0)
		{ after(grammarAccess.getDimensionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroupDeclaration
entryRuleGroupDeclaration
:
{ before(grammarAccess.getGroupDeclarationRule()); }
	 ruleGroupDeclaration
{ after(grammarAccess.getGroupDeclarationRule()); } 
	 EOF 
;

// Rule GroupDeclaration
ruleGroupDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupDeclarationAccess().getGroup()); }
		(rule__GroupDeclaration__Group__0)
		{ after(grammarAccess.getGroupDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberDeclaration
entryRuleMemberDeclaration
:
{ before(grammarAccess.getMemberDeclarationRule()); }
	 ruleMemberDeclaration
{ after(grammarAccess.getMemberDeclarationRule()); } 
	 EOF 
;

// Rule MemberDeclaration
ruleMemberDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberDeclarationAccess().getGroup()); }
		(rule__MemberDeclaration__Group__0)
		{ after(grammarAccess.getMemberDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRow
entryRuleRow
:
{ before(grammarAccess.getRowRule()); }
	 ruleRow
{ after(grammarAccess.getRowRule()); } 
	 EOF 
;

// Rule Row
ruleRow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRowAccess().getGroup()); }
		(rule__Row__Group__0)
		{ after(grammarAccess.getRowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLink
entryRuleLink
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinkAccess().getGroup()); }
		(rule__Link__Group__0)
		{ after(grammarAccess.getLinkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChild
entryRuleChild
:
{ before(grammarAccess.getChildRule()); }
	 ruleChild
{ after(grammarAccess.getChildRule()); } 
	 EOF 
;

// Rule Child
ruleChild 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChildAccess().getGroup()); }
		(rule__Child__Group__0)
		{ after(grammarAccess.getChildAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getAlternatives()); }
		(rule__Reference__Alternatives)
		{ after(grammarAccess.getReferenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringReference
entryRuleStringReference
:
{ before(grammarAccess.getStringReferenceRule()); }
	 ruleStringReference
{ after(grammarAccess.getStringReferenceRule()); } 
	 EOF 
;

// Rule StringReference
ruleStringReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringReferenceAccess().getValueAssignment()); }
		(rule__StringReference__ValueAssignment)
		{ after(grammarAccess.getStringReferenceAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getColumnParserRuleCall_0()); }
		ruleColumn
		{ after(grammarAccess.getStatementAccess().getColumnParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRowParserRuleCall_1()); }
		ruleRow
		{ after(grammarAccess.getStatementAccess().getRowParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDescendantsParserRuleCall_2()); }
		ruleDescendants
		{ after(grammarAccess.getStatementAccess().getDescendantsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_3()); }
		ruleDeclaration
		{ after(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReferenceParserRuleCall_4()); }
		ruleReference
		{ after(grammarAccess.getStatementAccess().getReferenceParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getChildParserRuleCall_5()); }
		ruleChild
		{ after(grammarAccess.getStatementAccess().getChildParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLinkParserRuleCall_6()); }
		ruleLink
		{ after(grammarAccess.getStatementAccess().getLinkParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getDimensionDeclarationParserRuleCall_0()); }
		ruleDimensionDeclaration
		{ after(grammarAccess.getDeclarationAccess().getDimensionDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getGroupDeclarationParserRuleCall_1()); }
		ruleGroupDeclaration
		{ after(grammarAccess.getDeclarationAccess().getGroupDeclarationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getMemberDeclarationParserRuleCall_2()); }
		ruleMemberDeclaration
		{ after(grammarAccess.getDeclarationAccess().getMemberDeclarationParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getReferredAssignment_0()); }
		(rule__Reference__ReferredAssignment_0)
		{ after(grammarAccess.getReferenceAccess().getReferredAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getReferenceAccess().getStringReferenceParserRuleCall_1()); }
		ruleStringReference
		{ after(grammarAccess.getReferenceAccess().getStringReferenceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getInitialStatementParserRuleCall_0()); }
	ruleInitialStatement
	{ after(grammarAccess.getModelAccess().getInitialStatementParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStatementsAssignment_1()); }
	(rule__Model__StatementsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getExclamationMarkKeyword_2()); }
	'!'
	{ after(grammarAccess.getModelAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Descendants__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Descendants__Group__0__Impl
	rule__Descendants__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantsAccess().getDescendantsKeyword_0()); }
	'descendants'
	{ after(grammarAccess.getDescendantsAccess().getDescendantsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Descendants__Group__1__Impl
	rule__Descendants__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantsAccess().getGroupAssignment_1()); }
	(rule__Descendants__GroupAssignment_1)
	{ after(grammarAccess.getDescendantsAccess().getGroupAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Descendants__Group__2__Impl
	rule__Descendants__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantsAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getDescendantsAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Descendants__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantsAccess().getDimensionAssignment_3()); }
	(rule__Descendants__DimensionAssignment_3)
	{ after(grammarAccess.getDescendantsAccess().getDimensionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DimensionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimensionDeclaration__Group__0__Impl
	rule__DimensionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimensionDeclarationAccess().getDimKeyword_0()); }
	'dim'
	{ after(grammarAccess.getDimensionDeclarationAccess().getDimKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimensionDeclaration__Group__1__Impl
	rule__DimensionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimensionDeclarationAccess().getNameAssignment_1()); }
	(rule__DimensionDeclaration__NameAssignment_1)
	{ after(grammarAccess.getDimensionDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DimensionDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDimensionDeclarationAccess().getValueAssignment_2()); }
	(rule__DimensionDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getDimensionDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupDeclaration__Group__0__Impl
	rule__GroupDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupDeclarationAccess().getGroupKeyword_0()); }
	'group'
	{ after(grammarAccess.getGroupDeclarationAccess().getGroupKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupDeclaration__Group__1__Impl
	rule__GroupDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupDeclarationAccess().getNameAssignment_1()); }
	(rule__GroupDeclaration__NameAssignment_1)
	{ after(grammarAccess.getGroupDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GroupDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupDeclarationAccess().getValueAssignment_2()); }
	(rule__GroupDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getGroupDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberDeclaration__Group__0__Impl
	rule__MemberDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberDeclarationAccess().getMemberKeyword_0()); }
	'member'
	{ after(grammarAccess.getMemberDeclarationAccess().getMemberKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberDeclaration__Group__1__Impl
	rule__MemberDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberDeclarationAccess().getNameAssignment_1()); }
	(rule__MemberDeclaration__NameAssignment_1)
	{ after(grammarAccess.getMemberDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberDeclarationAccess().getValueAssignment_2()); }
	(rule__MemberDeclaration__ValueAssignment_2)
	{ after(grammarAccess.getMemberDeclarationAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__0__Impl
	rule__Row__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRowKeyword_0()); }
	'row'
	{ after(grammarAccess.getRowAccess().getRowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__1__Impl
	rule__Row__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRowAction_1()); }
	()
	{ after(grammarAccess.getRowAccess().getRowAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__2__Impl
	rule__Row__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRowAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__3__Impl
	rule__Row__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getDimensionsAssignment_3()); }
	(rule__Row__DimensionsAssignment_3)
	{ after(grammarAccess.getRowAccess().getDimensionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__4__Impl
	rule__Row__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getGroup_4()); }
	(rule__Row__Group_4__0)*
	{ after(grammarAccess.getRowAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRowAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Row__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_4__0__Impl
	rule__Row__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getRowAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Row__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRowAccess().getDimensionsAssignment_4_1()); }
	(rule__Row__DimensionsAssignment_4_1)
	{ after(grammarAccess.getRowAccess().getDimensionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
	'column'
	{ after(grammarAccess.getColumnAccess().getColumnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnAction_1()); }
	()
	{ after(grammarAccess.getColumnAccess().getColumnAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getColumnAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
	rule__Column__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getDimensionsAssignment_3()); }
	(rule__Column__DimensionsAssignment_3)
	{ after(grammarAccess.getColumnAccess().getDimensionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__4__Impl
	rule__Column__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getGroup_4()); }
	(rule__Column__Group_4__0)*
	{ after(grammarAccess.getColumnAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getColumnAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__0__Impl
	rule__Column__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getColumnAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getDimensionsAssignment_4_1()); }
	(rule__Column__DimensionsAssignment_4_1)
	{ after(grammarAccess.getColumnAccess().getDimensionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkKeyword_0()); }
	'link'
	{ after(grammarAccess.getLinkAccess().getLinkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__1__Impl
	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkAction_1()); }
	()
	{ after(grammarAccess.getLinkAccess().getLinkAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__2__Impl
	rule__Link__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getLinkAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__3__Impl
	rule__Link__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getDescAssignment_3()); }
	(rule__Link__DescAssignment_3)
	{ after(grammarAccess.getLinkAccess().getDescAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__4__Impl
	rule__Link__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getLinkAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__5__Impl
	rule__Link__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLevAssignment_5()); }
	(rule__Link__LevAssignment_5)
	{ after(grammarAccess.getLinkAccess().getLevAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getLinkAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Child__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__0__Impl
	rule__Child__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getChildKeyword_0()); }
	'child'
	{ after(grammarAccess.getChildAccess().getChildKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__1__Impl
	rule__Child__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getChildAction_1()); }
	()
	{ after(grammarAccess.getChildAccess().getChildAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__2__Impl
	rule__Child__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getChildAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__3__Impl
	rule__Child__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getDimensionsAssignment_3()); }
	(rule__Child__DimensionsAssignment_3)
	{ after(grammarAccess.getChildAccess().getDimensionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__4__Impl
	rule__Child__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getGroup_4()); }
	(rule__Child__Group_4__0)*
	{ after(grammarAccess.getChildAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getChildAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Child__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group_4__0__Impl
	rule__Child__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getChildAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Child__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChildAccess().getDimensionsAssignment_4_1()); }
	(rule__Child__DimensionsAssignment_4_1)
	{ after(grammarAccess.getChildAccess().getDimensionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__GroupAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescendantsAccess().getGroupIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDescendantsAccess().getGroupIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Descendants__DimensionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescendantsAccess().getDimensionReferenceParserRuleCall_3_0()); }
		ruleReference
		{ after(grammarAccess.getDescendantsAccess().getDimensionReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDimensionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDimensionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DimensionDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDimensionDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getDimensionDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGroupDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getGroupDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMemberDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getMemberDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__DimensionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getDimensionsReferenceParserRuleCall_3_0()); }
		ruleReference
		{ after(grammarAccess.getRowAccess().getDimensionsReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Row__DimensionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRowAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
		ruleReference
		{ after(grammarAccess.getRowAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__DimensionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getDimensionsReferenceParserRuleCall_3_0()); }
		ruleReference
		{ after(grammarAccess.getColumnAccess().getDimensionsReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__DimensionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
		ruleReference
		{ after(grammarAccess.getColumnAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__DescAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getDescReferenceParserRuleCall_3_0()); }
		ruleReference
		{ after(grammarAccess.getLinkAccess().getDescReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__LevAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getLevReferenceParserRuleCall_5_0()); }
		ruleReference
		{ after(grammarAccess.getLinkAccess().getLevReferenceParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__DimensionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChildAccess().getDimensionsReferenceParserRuleCall_3_0()); }
		ruleReference
		{ after(grammarAccess.getChildAccess().getDimensionsReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Child__DimensionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChildAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
		ruleReference
		{ after(grammarAccess.getChildAccess().getDimensionsReferenceParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__ReferredAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getReferredDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getReferredDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReferenceAccess().getReferredDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getReferredDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringReference__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringReferenceAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringReferenceAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
