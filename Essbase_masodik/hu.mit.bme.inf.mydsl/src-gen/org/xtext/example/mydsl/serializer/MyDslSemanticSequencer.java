/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Child;
import org.xtext.example.mydsl.myDsl.Column;
import org.xtext.example.mydsl.myDsl.Descendants;
import org.xtext.example.mydsl.myDsl.DimensionDeclaration;
import org.xtext.example.mydsl.myDsl.GroupDeclaration;
import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.MDXCOlumns;
import org.xtext.example.mydsl.myDsl.MDXFunction;
import org.xtext.example.mydsl.myDsl.MDXRows;
import org.xtext.example.mydsl.myDsl.MemberDeclaration;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.QueryMDX;
import org.xtext.example.mydsl.myDsl.QueryReport;
import org.xtext.example.mydsl.myDsl.Reference;
import org.xtext.example.mydsl.myDsl.Report;
import org.xtext.example.mydsl.myDsl.ReportParameter;
import org.xtext.example.mydsl.myDsl.Row;
import org.xtext.example.mydsl.myDsl.StringReference;
import org.xtext.example.mydsl.myDsl.database;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CHILD:
				sequence_Child(context, (Child) semanticObject); 
				return; 
			case MyDslPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case MyDslPackage.DESCENDANTS:
				sequence_Descendants(context, (Descendants) semanticObject); 
				return; 
			case MyDslPackage.DIMENSION_DECLARATION:
				sequence_DimensionDeclaration(context, (DimensionDeclaration) semanticObject); 
				return; 
			case MyDslPackage.GROUP_DECLARATION:
				sequence_GroupDeclaration(context, (GroupDeclaration) semanticObject); 
				return; 
			case MyDslPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyDslPackage.MDXC_OLUMNS:
				sequence_MDXCOlumns(context, (MDXCOlumns) semanticObject); 
				return; 
			case MyDslPackage.MDX_FUNCTION:
				sequence_MDXFunction(context, (MDXFunction) semanticObject); 
				return; 
			case MyDslPackage.MDX_ROWS:
				sequence_MDXRows(context, (MDXRows) semanticObject); 
				return; 
			case MyDslPackage.MEMBER_DECLARATION:
				sequence_MemberDeclaration(context, (MemberDeclaration) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.QUERY_MDX:
				sequence_QueryMDX(context, (QueryMDX) semanticObject); 
				return; 
			case MyDslPackage.QUERY_REPORT:
				sequence_QueryReport(context, (QueryReport) semanticObject); 
				return; 
			case MyDslPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case MyDslPackage.REPORT:
				sequence_Report(context, (Report) semanticObject); 
				return; 
			case MyDslPackage.REPORT_PARAMETER:
				sequence_ReportParameter(context, (ReportParameter) semanticObject); 
				return; 
			case MyDslPackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			case MyDslPackage.STRING_REFERENCE:
				sequence_StringReference(context, (StringReference) semanticObject); 
				return; 
			case MyDslPackage.DATABASE:
				sequence_database(context, (database) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Child
	 *     Child returns Child
	 *
	 * Constraint:
	 *     (dimensions+=Reference dimensions+=Reference*)
	 */
	protected void sequence_Child(ISerializationContext context, Child semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Column
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (dimensions+=Reference dimensions+=Reference*)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Descendants
	 *     Descendants returns Descendants
	 *
	 * Constraint:
	 *     (group=ID dimension=Reference)
	 */
	protected void sequence_Descendants(ISerializationContext context, Descendants semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DESCENDANTS__GROUP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DESCENDANTS__GROUP));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DESCENDANTS__DIMENSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DESCENDANTS__DIMENSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescendantsAccess().getGroupIDTerminalRuleCall_1_0(), semanticObject.getGroup());
		feeder.accept(grammarAccess.getDescendantsAccess().getDimensionReferenceParserRuleCall_3_0(), semanticObject.getDimension());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns DimensionDeclaration
	 *     Declaration returns DimensionDeclaration
	 *     DimensionDeclaration returns DimensionDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=[Dimension|ID])
	 */
	protected void sequence_DimensionDeclaration(ISerializationContext context, DimensionDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIMENSION_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIMENSION_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDimensionDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDimensionDeclarationAccess().getValueDimensionIDTerminalRuleCall_2_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns GroupDeclaration
	 *     Declaration returns GroupDeclaration
	 *     GroupDeclaration returns GroupDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_GroupDeclaration(ISerializationContext context, GroupDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GROUP_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GROUP_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGroupDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGroupDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (desc=Reference lev=Reference)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__DESC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__DESC));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__LEV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__LEV));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getDescReferenceParserRuleCall_3_0(), semanticObject.getDesc());
		feeder.accept(grammarAccess.getLinkAccess().getLevReferenceParserRuleCall_5_0(), semanticObject.getLev());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MDXCOlumns returns MDXCOlumns
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_MDXCOlumns(ISerializationContext context, MDXCOlumns semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MDXC_OLUMNS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MDXC_OLUMNS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMDXCOlumnsAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MDXFunction returns MDXFunction
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_MDXFunction(ISerializationContext context, MDXFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MDX_FUNCTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MDX_FUNCTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMDXFunctionAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MDXRows returns MDXRows
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_MDXRows(ISerializationContext context, MDXRows semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MDX_ROWS__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MDX_ROWS__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMDXRowsAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns MemberDeclaration
	 *     Declaration returns MemberDeclaration
	 *     MemberDeclaration returns MemberDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=STRING)
	 */
	protected void sequence_MemberDeclaration(ISerializationContext context, MemberDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MEMBER_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MEMBER_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMemberDeclarationAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((Queries+=Query+ Reports+=Report+) | Reports+=Report+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Query returns QueryMDX
	 *     QueryMDX returns QueryMDX
	 *
	 * Constraint:
	 *     (name=ID r=MDXRows fr=MDXFunction c=MDXCOlumns fc=MDXFunction)
	 */
	protected void sequence_QueryMDX(ISerializationContext context, QueryMDX semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY_MDX__R) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY_MDX__R));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY_MDX__FR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY_MDX__FR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY_MDX__C) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY_MDX__C));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.QUERY_MDX__FC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.QUERY_MDX__FC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryMDXAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQueryMDXAccess().getRMDXRowsParserRuleCall_6_0(), semanticObject.getR());
		feeder.accept(grammarAccess.getQueryMDXAccess().getFrMDXFunctionParserRuleCall_8_0(), semanticObject.getFr());
		feeder.accept(grammarAccess.getQueryMDXAccess().getCMDXCOlumnsParserRuleCall_12_0(), semanticObject.getC());
		feeder.accept(grammarAccess.getQueryMDXAccess().getFcMDXFunctionParserRuleCall_14_0(), semanticObject.getFc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Query returns QueryReport
	 *     QueryReport returns QueryReport
	 *
	 * Constraint:
	 *     (name=ID QueryReport+=ReportQueryParameters*)
	 */
	protected void sequence_QueryReport(ISerializationContext context, QueryReport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     referred=[Declaration|ID]
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REFERENCE__REFERRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REFERENCE__REFERRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getReferredDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.getReferred());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns ReportParameter
	 *     ReportParameter returns ReportParameter
	 *
	 * Constraint:
	 *     reparam=StringReference
	 */
	protected void sequence_ReportParameter(ISerializationContext context, ReportParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REPORT_PARAMETER__REPARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REPORT_PARAMETER__REPARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReportParameterAccess().getReparamStringReferenceParserRuleCall_3_0(), semanticObject.getReparam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Report returns Report
	 *
	 * Constraint:
	 *     (repout=[Query|ID] from=database)
	 */
	protected void sequence_Report(ISerializationContext context, Report semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REPORT__REPOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REPORT__REPOUT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REPORT__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REPORT__FROM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReportAccess().getRepoutQueryIDTerminalRuleCall_3_0_1(), semanticObject.getRepout());
		feeder.accept(grammarAccess.getReportAccess().getFromDatabaseParserRuleCall_5_0(), semanticObject.getFrom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns Row
	 *     Row returns Row
	 *
	 * Constraint:
	 *     (dimensions+=Reference dimensions+=Reference*)
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReportQueryParameters returns StringReference
	 *     Reference returns StringReference
	 *     StringReference returns StringReference
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringReference(ISerializationContext context, StringReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.STRING_REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.STRING_REFERENCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringReferenceAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     database returns database
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_database(ISerializationContext context, database semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATABASE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATABASE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatabaseAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
